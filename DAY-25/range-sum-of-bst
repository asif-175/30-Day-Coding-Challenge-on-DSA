class Solution(object):
    def rangeSumBST(self, root, low, high):
        """
        :type root: Optional[TreeNode]
        :type low: int
        :type high: int
        :rtype: int
        """
        if not root:
            return 0

        # If root's value is less than low, skip left subtree
        if root.val < low:
            return self.rangeSumBST(root.right, low, high)

        # If root's value is greater than high, skip right subtree
        if root.val > high:
            return self.rangeSumBST(root.left, low, high)

        # Otherwise, include root's value and recurse both sides
        return (root.val +
                self.rangeSumBST(root.left, low, high) +
                self.rangeSumBST(root.right, low, high))
